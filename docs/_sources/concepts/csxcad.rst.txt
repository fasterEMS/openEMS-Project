CSXCAD
=========

An openEMS simulation always starts by creating a 3D model of the structure
using the CSXCAD library. All created entities for the simulation are stored
in the CSXCAD data structure (or object), which must be initialized first.
It's done by either the :func:`InitCSX` method in Matlab/Octave, or the
:class:`~CSXCAD.ContinuousStructure` class in Python::

    % Matlab/Octave
    csx = InitCSX();

    # Python
    import CSXCAD
    csx = CSXCAD.ContinuousStructure()

By default, a Cartesian coordinate system is used. But if the simulated
structure is predominantly round, the Cartesian mesh will have a difficult
time aligning itself with an object's edges. One can use the alternative
cylindrical coordinate system to minimize staircasing errors::

    % Matlab/Octave
    csx = InitCSX('CoordSystem', '1');
    
    # Python
    import CSXCAD
    csx = CSXCAD.ContinuousStructure(CoordSystem=1)

.. note::

   This mainly affects meshing of the simulation box during a simulation,
   not the coordinates of 3D structures themselves. When creating 3D
   models, their coordinates do follow the meshing coordinate system by
   default, but it can always be overridden.

Once initialized, 3D models can be created by the functions provided by CSXCAD.
In Matlab/Octave, nearly all of them accept an old instance of the `csx` data
structure, and returns a modified new one. The Python binding has a more modern
coding style in comparison, which achieves this via class methods rather than
functions::

    % Matlab/Octave
    csx = AddExample(csx, arg1, arg2, arg3, ...)

    # Python
    csx.AddExample(arg1, arg2, arg3, ...)

These CSXCAD functions can be classified into two types, *properties*
and *primitives*. They define material properties and shapes respectively.

*Properties* defines the physical property of a material, such as a metal,
a thin conducting sheet, a dielectric metarial, a magnetic material.
Technically, excitation sources, probes, and field dump boxes are also
*Properties*.

*Primitives* are the building blocks to create 1D, 2D, 3D shapes, so that one
can create simple object such as a Curve, a Polygon, a Box, or a Sphere. More
complex structures can be created by combining various primitives. For example,
a metal sheet with cylindrical holes can be achieved by combining a metal box
with several air cylinders.

Once modeled, the CSXCAD data structure is usually saved to disk as an `.xml`
file.
